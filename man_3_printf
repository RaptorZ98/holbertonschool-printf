PRINTF

.SH NAME
		Printf

.SH SYNOSIS

#ifndef MAIN_H
#define MAIN_H
#include <stdarg.h>
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>

int _printf(const char *format, ...);
int read_porcent(int i, const char *format, struct Buff *buff, va_list a);
void read_format(const char *format, va_list a, struct Buff *buff);
void get_num(int n, struct Buff *buff, int len);
void check_buff(struct Buff *buff);

int get_white(struct Buff *buff, int i);
int get_per(struct Buff *buff, int i);
int get_param(struct Buff *buff, int i, const char *format);
void get_b(va_list a, struct Buff *buff);

void get_c(va_list a, struct Buff *buff);
void get_s(va_list a, struct Buff *buff);
void get_d(va_list a, struct Buff *buff);

void get_u(va_list a, struct Buff *buff);
void get_o(va_list a, struct Buff *buff);
void get_x(va_list a, struct Buff *buff);
void get_X(va_list a, struct Buff *buff);
void get_p(va_list a, struct Buff *buff);
void get_hex(va_list a, struct Buff *buff);

char get_letter(unsigned int n, int i);
void print_nill(struct Buff *buff);
void make_hex(int a, struct Buff *buff);
void print_assi(struct Buff *buff, int b);

void add_buff(struct Buff *buff, char a);
void str_rev(va_list a, struct Buff *buff);
void rot_print(va_list a, struct Buff *buff);

.SH DESCRIPTION FUNTIONS

-read_porcent:Reads the '%' character and processes the next 
				format character in the format string.

-read_format:Reads the format string format and processes each format character

-get_num:Converts a number n to a string

-check_buf:Checks whether the buff output buffer has reached its maximum
			capacity and prints it if needed.

-get_white, get_per and get_param:auxiliary functions used by the
								'read_porcent()' function to process 
								the different formatting characters.

-get_letter:Converts a number n to a hexadecimal letter and returns it 
			as a character.

-print_nill:Prints the character string "(nil)" in the output buffer buff.

-make_hex:Converts an integer a to a hexadecimal string and stores it in
			the output buffer buff.

print_assi: prints the character string "0x" followed by an integer b in hexadecimal format in the buff output buffer.
.SH DESCRIPTION
	
The printf function is used to print a string of characters and give a specific
format to the text. When using this function, you must provide a character
string that contains both the text to be printed and the desired formatting.
In addition to formatting, the printf function can accept other parameters,
such as integers, text strings, characters, hexadecimal integer,
format specifier, among others.

.SH FUNCTION

%c -Write a simple character
%s -Type a string of characters
%% -Prints a percentage
%d -Write a signed decimal integer
%i -Writes a signed decimal, octal or hexadecimal integer
%b -Prints a numbers in binary
%u -Writes an unsigned decimal integer
%o -Writes an octal integer, without a leading zero
%x -Writes a hexadecimal integer without the prefix 0x
%X -Is a specifier to print a value in hexadecimal format in uppercase letters. 
%S -Generates an array of characters and replaces any character that cannot 
	be printed with its hexadecimal representation
%p -Used to print pointer type data
%r -Prints a string but in reverse
%R -Prints the string but with rot13'ed.

.SH EXAMPLE

/**
   * get_s - adds a string to the buffer
    * @a: function parameter
	 * @buff: buffer
	  */
void get_s(va_list a, struct Buff *buff)
{
	int as;
	char *sa;
	
	sa = va_arg(a, char *);
	if (sa == NULL)
			sa = "(null)";
	for (as = 0; sa[as] != '\0'; as++)
	{
		add_buff(sa[as]);
		check_buff(buff);
	}					
}

AUTHORS

Federico Heuer
Emily SÃ¡nchez
